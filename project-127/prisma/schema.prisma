// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String        @id @default(cuid())
  fname             String
  mname             String
  lname             String
  email             String        @unique
  password          String
  createdAt         DateTime      @default(now()) @db.Timestamptz()
  last_login_at     DateTime      @db.Timestamptz()

  todo              ToDo[]
  announcement      Announcement[]
  facebookPost      FacebookPost[]

  @@index([id])
  @@index([createdAt, lname])
}

enum AnnouncementSource {
  FACEBOOK
  CUSTOM
}

model Announcement {
  id              String          @id @default(cuid()) @map("ann_ID")
  userID          String          @map("user_ID")
  title           String
  description     String?         @db.Text
  createdBy       string
  createdAt       DateTime        @db.Timestamptz()
  Source          AnnouncementSource

  user            User            @relation(fields:[userID], references: [id], onDelete: Cascade)

  @@index([createdBy, title])
  @@index([createdAt])
}

enum StatusType{
  ACCEPT
  REJECT
  PENDING
}

model FacebookPost {
  id              String          @id @default(cuid())
  annID           String          @map("ann_ID")
  userID          String          @map("user_ID")
  pageName        String          @map("page_Name")
  fbPostID        String          @unique @map("FB_Post_Id")
  author          String
  content         String          @db.Text
  url             String
  createdAt       DateTime        @db.Timestamptz()
  status          StatusType

  announcement    Announcement    @relation(fields:[annID], references: [id], onDelete: Cascade)
  user            User            @relation(fields:[userID], references: [id], onDelete: Cascade)
  fbPageName      FBPage          @relation(fields:[pageName], references [pageName], onDelete: Cascade)

  todos           ToDo[]



  @@map("Facebook_Post")
  @@index([id, pageName])
  @@index[(author)]
}

enum PriorityType{
  URGENT
  IMPORTANT
  LATER
}

model ToDo {
  id              String          @id @default(cuid())
  userID          String
  fbID            String
  title           String
  description     String?         @db.Text
  dueDate         DateTime        @map("due_Date")
  createdAt       DateTime        @db.Timestamptz() @default(now())
  priority        PriorityType

  user            User            @relation(fields:[userID], references:[id], onDelete: Cascade)
  facebookPost    FacebookPost    @relation(fields:[fbID], references:[id], onDelete: Cascade)

  @@index([priority])
  @@map("To_Dos")
}

enum PageType{
  ADMIN
  STUDENT
  COLLEGE
  ACADEMIC
  INTEREST
  MASS

}
model FBPage {
  pageName        String          @id
  url             String
  type            PageType

  facebookPost    FacebookPost[]

  @index([pageName])
}




